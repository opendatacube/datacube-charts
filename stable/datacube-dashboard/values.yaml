# Default values for datacube-wms.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
replicaCount: 1
image:
  registry: docker.io
  repository: opendatacube/dashboard
  tag: "2.1.0"  # Tag version any later than 2.1.0 is broken
  pullPolicy: Always

datacube:
  configPath: /opt/odc/datacube.conf
database:
  database: ows
  host: db-dev-eks-datacube-default.cxhoeczwhtar.ap-southeast-2.rds.amazonaws.com
  port: 5432
  adminSecret: dev-eks-datacube
  existingSecret: ows

global:
  externalDatabase:
    database: ows
  clusterSecret: ows

setup:
  dockerArgs: [ "/bin/bash", "-c", "PGPASSWORD=$ADMIN_PASSWORD psql -h $DB_HOSTNAME -p 5432 -U $ADMIN_USERNAME -d $DB_DATABASE -c 'CREATE EXTENSION IF NOT EXISTS postgis'" ]
  image:
    registry: docker.io
    repository: postgres
    tag: latest
    pullPolicy: IfNotPresent

resources:
  limits:
    cpu: "300m"
    memory: 1024Mi

annotations:
  iam.amazonaws.com/role: dev-eks-datacube-wms

additionalEnvironmentVars: { }

service:
  type: NodePort
  port: 80
containerPort: 8080 # Internal port on which pod is running and serving cubedash app

update:
  enabled: false
  historyLimit: 1
  cron: "0 */6 * * *"  ## Run every 6 hours
  suspend: false
  dockerArgs: [ "cubedash-gen", "--all", "||", "true"]
dockerArgs: [ "gunicorn", "-b", "0.0.0.0:8080", "-w", "4", "--timeout", "60", "cubedash:app" ]

update_creation_dt:
  enabled: false
  historyLimit: 1
  cron: "0 13 * * *"  ## Run daily at 11 pm AEST
  suspend: false
  # dataset_type_ref id for the desired product is obtained from `SELECT id,name FROM agdc.dataset_type;` psql command
  dockerArgs:
    - [ "psql", "-c", "'drop schema if exists cubedash cascade'"]
    - [ "psql", "-c", "'UPDATE agdc.dataset d SET metadata = jsonb_build_object('creation_dt', s.metadata#>>'{extent, center_dt}') || s.metadata FROM agdc.dataset s WHERE d.dataset_type_ref=81 AND d.id = s.id'"]
    - [ "psql", "-c", "'UPDATE agdc.dataset d SET metadata = jsonb_build_object('creation_dt', s.metadata#>>'{extent, center_dt}') || s.metadata FROM agdc.dataset s WHERE d.dataset_type_ref=82 AND d.id = s.id'"]
    - [ "psql", "-c", "'UPDATE agdc.dataset d SET metadata = jsonb_build_object('creation_dt', s.metadata#>>'{extent, center_dt}') || s.metadata FROM agdc.dataset s WHERE d.dataset_type_ref=83 AND d.id = s.id'"]
    - [ "psql", "-c", "'UPDATE agdc.dataset d SET metadata = jsonb_build_object('creation_dt', s.metadata#>>'{extent, center_dt}') || s.metadata FROM agdc.dataset s WHERE d.dataset_type_ref=84 AND d.id = s.id'"]

additionalSettings: |
  CUBEDASH_THEME='dea'
  CUBEDASH_DEFAULT_PRODUCTS = ('aster_false_colour','ls5_fc_albers','ls7_fc_albers',)

  # Which field should we use when grouping products in the top menu?
  CUBEDASH_PRODUCT_GROUP_BY_FIELD = 'product_type'

  # Ungrouped products will be grouped together in this size.
  CUBEDASH_PRODUCT_GROUP_SIZE = 5

  # Maximum search results
  CUBEDASH_HARD_SEARCH_LIMIT = 100

  # Maximum number of source/derived datasets to show
  CUBEDASH_PROVENANCE_DISPLAY_LIMIT = 30

  # Customise '/stac' endpoint information
  STAC_ENDPOINT_ID = 'AWS_Dev_EKS_Explorer'
  STAC_ENDPOINT_TITLE = 'AWS dev eks explorer'
  STAC_DEFAULT_PAGE_SIZE = 20
  STAC_PAGE_SIZE_LIMIT = 1000

ingress:
  enabled: false
  path: "/*"
  hosts:
    - ""
  annotations:
    kubernetes.io/ingress.class: alb
