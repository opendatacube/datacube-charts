# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
serviceAccountName:
replicaCount: 1

image:
  registry: docker.io
  repository: opendatacube/explorer
  tag: "latest"
  pullPolicy: Always


###################################
## DATABASE | External Database
###################################
externalPostgresql:
  database: datacube
  host: localhost
  port: 5432
  existingSecret: "explorer-reader"


###################################
## DATABASE | Embedded Postgres
###################################
postgresql:
  ## if the `stable/postgresql` chart is used
  ## - [WARNING] the embedded Postgres is NOT SUITABLE for production deployments of datacube-explorer
  ## - [WARNING] consider using an external database with `externalDatabase.*`
  ## - set to `false` if using `externalDatabase.*`
  ##
  enabled: true
  nameOverride: datacube-explorer-postgresql
  postgresqlUsername: postgres
  postgresqlDatabase: datacube
  port: 5432
  existingSecret: "datacube-explorer"

  ## the key within `postgresql.existingSecret` containing the password string
  ##
  existingSecretKey: "postgresql-password"
  persistence:
    ## if postgres will use Persistent Volume Claims to store data
    ## - [WARNING] if false, data will be LOST as postgres Pods restart
    ##
    enabled: true

    ## the name of the StorageClass used by the PVC
    ##
    storageClass: ""

    ## the access modes of the PVC
    ##
    accessModes:
      - ReadWriteOnce

    ## the size of PVC to request
    ##
    size: 8Gi

  replication:
    enabled: false
    readReplicas: 2
    synchronousCommit: "on"
    numSynchronousReplicas: 1
    applicationName: datacube-explorer


resources:
  limits:
    cpu: "300m"
    memory: 1024Mi

annotations: {}

livenessProbe:
  httpGet:
    path: "/stac"
    port: 8080
  initialDelaySeconds: 10
  periodSeconds: 30
  timeoutSeconds: 60
  failureThreshold: 5

readinessProbe:
  httpGet:
    path: "/stac"
    port: 8080
  initialDelaySeconds: 10
  periodSeconds: 30
  timeoutSeconds: 60
  failureThreshold: 5

startupProbe:
  httpGet:
    path: "/stac"
    port: 8080
  initialDelaySeconds: 10
  periodSeconds: 30
  timeoutSeconds: 60
  failureThreshold: 5

additionalEnvironmentVars: {}

service:
  type: NodePort

externalPort: 80 # External port on which service listen to
internalPort: 8080 # Internal port on which pod is running and serving cubedash app

dockerArgs: ["gunicorn", "-b", "0.0.0.0:8080", "-w", "3", "--threads=2", "-k",
   "gthread", "-t", "60", "--pid", "gunicorn.pid", "--worker-tmp-dir", "/dev/shm",
   "--preload", "--config", "python:cubedash.gunicorn_config", "cubedash:app",
   "||", "true"]

refreshExtent:
  enabled: false
  historyLimit: 1
  concurrencyPolicy: Allow  # concurrent executions of a job
  cron: "0 13 * * *"  ## Run daily at 11 pm AEST
  suspend: false
  backoffLimit: 0  # Number of retries
  dockerArgs:
  - "cubedash-gen"
  - "--no-init-database"
  - "--refresh-stats"
  - "--force-refresh"
  - "--all"

additionalSettings: {}

affinity: {}

ingress:
  enabled: false
  path: "/"
  hosts:
    - "explorer.local"
  annotations: {}
