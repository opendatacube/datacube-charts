apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ include "datacube-wps.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "datacube-wps.name" . }}
    helm.sh/chart: {{ include "datacube-wps.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "datacube-wps.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "datacube-wps.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
      annotations:
      {{- range $key, $value := .Values.wps.annotations }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
    spec:
      # Turning single-request-reopen option on would fix issue where in two requests from the same port are
      # not handled correctly it will close the socket and open a new one before sending the second request.
      dnsConfig:
        options:
          - name: single-request-reopen
      initContainers:
      {{- if .Values.wpsConfig.image }}
      - name: wps-config
        image: "{{ $.Values.wpsConfig.image.repository }}:{{ $.Values.wpsConfig.image.tag }}"
        imagePullPolicy: {{ $.Values.wpsConfig.image.pullPolicy }}
        args: [ "cp", "-R", "{{ .Values.wpsConfig.image.src }}", "{{ .Values.wpsConfig.path }}"]
        volumeMounts:
        - mountPath: {{ .Values.wpsConfig.path }}
          name: wps-config-volume
      {{- end }}
      containers:
        - name: wps
          env:
          {{- if .Values.wpsConfig.url }}
          - name: WPS_CONFIG_URL
            value: {{ .Values.wpsConfig.url | quote }}
          {{- end }}
          {{- if or .Values.wpsConfig.configMap .Values.wpsConfig.image }}
          - value: "{{ .Values.wpsConfig.path }}/pywps.cfg"
            name: WPS_CONFIG_PATH
          - value: "{{ .Values.wpsConfig.path }}/datacube-wps-config.yaml"
            name: DATACUBE_WPS_CONFIG_PATH
          {{- end }}
          - name: DB_HOSTNAME
            value: {{ .Values.database.host | quote }}
          - name: DB_PORT
            value: {{ .Values.database.port | quote }}
          - name: DB_DATABASE
            value: {{ .Values.database.database | quote }}
          - name: DB_USERNAME
            valueFrom:
              secretKeyRef:
                name: {{ .Values.database.existingSecret }}
                key: postgres-username
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.database.existingSecret }}
                key: postgres-password
          # - name: AWS_ACCESS_KEY_ID
          #   valueFrom:
          #     secretKeyRef:
          #       name: {{ .Values.aws.existingSecret }}
          #       key: aws_access_key_id
          # - name: AWS_SECRET_ACCESS_KEY
          #   valueFrom:
          #     secretKeyRef:
          #       name: {{ .Values.aws.existingSecret }}
          #       key: aws_secret_access_key
          - name: VIRTUAL_HOST
            value: localhost,127.0.0.
          - name: WPS_BASEURL
            value: {{ tpl .Values.wps.baseurl .  | quote }}
          {{- if .Values.wps.additionalEnvironmentVars }}
          {{- range $arg, $value := .Values.wps.additionalEnvironmentVars }}
          - name: {{ $arg | quote }}
            value: {{ $value | quote }}
          {{- end }}
          {{- end }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          {{- with .Values.wps.livenessProbe }}
          livenessProbe:
{{ toYaml . | indent 12 }}
          {{- end }}
          {{- with .Values.wps.readinessProbe }}
          readinessProbe:
{{ toYaml . | indent 12 }}
          {{- end }}
          volumeMounts:
          - mountPath: /opt/outputs/
            name: output-volume
          {{- if or .Values.wpsConfig.configMap .Values.wpsConfig.image }}
          - mountPath: {{ .Values.wpsConfig.path }}
            name: wps-config-volume
          {{- end }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
      volumes:
      - name: output-volume
        emptyDir: {}
      {{- if or .Values.wpsConfig.configMap .Values.wpsConfig.image }}
      - name: wps-config-volume
      {{- if .Values.wpsConfig.configMap }}
        configMap:
          name: {{ .Values.wpsConfig.configMap }}
      {{- else if .Values.wpsConfig.image }}
        emptyDir: {}
      {{- end }}
      {{- end }}
